name: CI for backend
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    working-directory: backend

jobs:
  ci:
    name: Check Python files
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip

    - name: Cache the results of pip
      id: cache-pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install poetry
      run: |
        python -m pip install poetry
        poetry config virtualenvs.in-project true

    - name: Cache dependencies
      id: dependencies-cache
      uses: actions/cache@v2
      with:
        path: .venv
        key: ${{ runner.os }}-dep-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-dep-

    - name: Install dependencies
      run: poetry install

    # 全てのチェックが実行されるようにcontinue-on-errorを付ける
    - name: Lint with flake8
      id: flake8
      run: poetry run flake8 --count --show-source --statistics
      continue-on-error: true

    - name: Lint with mypy
      id: mypy
      run: poetry run mypy . --pretty
      continue-on-error: true

    - name: Format with black
      id: black
      run: poetry run black . --check --diff
      continue-on-error: true

    - name: Format with isort
      id: isort
      run: poetry run isort . --check-only
      continue-on-error: true

    - name: Test with pytest
      id: pytest
      run: poetry run pytest
      continue-on-error: true

    - name: Check whether failures exist
      if: ${{ steps.flake8.outcome == 'failure'
        || steps.mypy.outcome == 'failure'
        || steps.black.outcome == 'failure'
        || steps.isort.outcome == 'failure'
        || steps.pytest.outcome == 'failure' }}
      run: |
        echo "::error::flake8: ${{ steps.flake8.outcome }}," \
          "mypy: ${{ steps.mypy.outcome }}," \
          "black: ${{ steps.black.outcome }}," \
          "isort: ${{ steps.isort.outcome }}," \
          "pytest: ${{ steps.pytest.outcome }}"
        sh -c "exit 1"
